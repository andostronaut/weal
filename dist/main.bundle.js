(()=>{var e,t,r,n,o,a={3964:(e,t,r)=>{const n=r(7294),{ProgressBar:o}=r(1607),a=r(2671),{LIGHT_THEME_KEY:i}=r(4224);e.exports=({msg:e})=>{const{theme:t}=a(),r=t===i;return n.createElement("div",{className:"loader-container "+(r?"light":"dark")},n.createElement(o,{height:"80",width:"80",ariaLabel:"progress-bar-loading",wrapperStyle:{},wrapperClass:"progress-bar-wrapper",borderColor:r?"#000":"#FFF",barColor:r?"#000":"#FFF"}),n.createElement("span",{className:"loader-container-msg "+(r?"light":"dark")},e))}},4224:e=>{e.exports={APP_NAME:"Weal",KEY_MODE:"mode",KEY_CLEAR:"clear",CMD_MODE_LIGHT:"mode --light",CMD_MODE_DARK:"mode --dark",LIGHT_THEME:"light",DARK_THEME:"dark",LIGHT_THEME_KEY:0,DARK_THEME_KEY:1,DEFAULT_OUTPUTS_LIST:["Welcome to weal interface","-------------------------","The following example commands are provided:","`mode --light`` will change to light theme.","`mode --dark`` will change to dark theme.","`clear` will clear the terminal."],KEY_CODE_ARROW_UP:38,TERMINAL_HEIGHT:500,KEY_THEME:"theme",KEY_HISTORY:"history",BASIC_CMDS:["mode --light","mode --dark","clear"],DEFAULT_PROMPT:"$",PWD_CMD:"pwd",APP_LOADER_MSG:"Checking process is ready...",FALLBACK_LOADER_MSG:"Sorry, please re-open directory on encountered an error"}},2671:(e,t,r)=>{const n=r(7294),{getSessionStorage:o,setSessionStorage:a}=r(4222),{defaultTheme:i}=r(5656),{KEY_THEME:l}=r(4224);e.exports=()=>{const[e,t]=n.useState(null);return n.useEffect((()=>{void 0!==o(l)?t(o(l)):t(i)}),[o(l)]),{theme:e,setThemeOnStateAndSession:e=>{a(l,e)}}}},1285:(e,t,r)=>{const n=r(7294),{createRoot:o}=r(745),a=r(3964),{FALLBACK_LOADER_MSG:i}=r(4224);r(5004);const l=o(document.getElementById("root")),s=n.lazy((()=>r.e(238).then(r.t.bind(r,7238,23))));l.render(n.createElement(n.Suspense,{fallback:n.createElement(a,{msg:i})},n.createElement(s,null)))},4222:e=>{e.exports={getLocalStorage:e=>JSON.parse(localStorage.getItem(e)),setLocalStorage:(e,t)=>{localStorage.setItem(e,JSON.stringify(t))},getSessionStorage:e=>JSON.parse(sessionStorage.getItem(e)),setSessionStorage:(e,t)=>{sessionStorage.setItem(e,JSON.stringify(t))}}},5656:(e,t,r)=>{const{ColorMode:n}=r(3794),{CMD_MODE_LIGHT:o,CMD_MODE_DARK:a,LIGHT_THEME:i,DARK_THEME:l}=r(4224),s=Object.freeze({light:n.Light,dark:n.Dark}),c=s[i];e.exports={defaultTheme:c,switchTheme:e=>{let t=i;return e.toLocaleLowerCase().trim()===o?t=i:e.toLocaleLowerCase().trim()===a&&(t=l),s[t]}}},5289:(e,t,r)=>{"use strict";r.d(t,{Z:()=>l});var n=r(7537),o=r.n(n),a=r(3645),i=r.n(a)()(o());i.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Poppins&display=swap);"]),i.push([e.id,"body {\n  margin: 0;\n  padding: 0;\n  font-family: Poppins, sans-serif;\n}\n\n.react-terminal-wrapper {\n  border-radius: 0 !important;\n  height: 100vh !important;\n  font-size: 14px !important;\n}\n\n.react-terminal:last-child {\n  padding-bottom: 50px;\n}\n\n.loader-container {\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n\n.loader-container.dark {\n  background-color: #252a33;\n}\n\n.loader-container.light {\n  background-color: #ddd;\n}\n\n.loader-container-msg.dark {\n  color: #fff;\n}\n\n.loader-container-msg.light {\n  color: #000;\n}\n","",{version:3,sources:["webpack://./interfaces/styles/main.css"],names:[],mappings:"AAEA;EACE,SAAS;EACT,UAAU;EACV,gCAAgC;AAClC;;AAEA;EACE,2BAA2B;EAC3B,wBAAwB;EACxB,0BAA0B;AAC5B;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,WAAW;EACX,aAAa;EACb,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,WAAW;AACb",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Poppins&display=swap");\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: Poppins, sans-serif;\n}\n\n.react-terminal-wrapper {\n  border-radius: 0 !important;\n  height: 100vh !important;\n  font-size: 14px !important;\n}\n\n.react-terminal:last-child {\n  padding-bottom: 50px;\n}\n\n.loader-container {\n  width: 100%;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n\n.loader-container.dark {\n  background-color: #252a33;\n}\n\n.loader-container.light {\n  background-color: #ddd;\n}\n\n.loader-container-msg.dark {\n  color: #fff;\n}\n\n.loader-container-msg.light {\n  color: #000;\n}\n'],sourceRoot:""}]);const l=i},5004:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>E});var n=r(3379),o=r.n(n),a=r(7795),i=r.n(a),l=r(569),s=r.n(l),c=r(3565),d=r.n(c),p=r(9216),A=r.n(p),m=r(4589),u=r.n(m),g=r(5289),f={};f.styleTagTransform=u(),f.setAttributes=d(),f.insert=s().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=A(),o()(g.Z,f);const E=g.Z&&g.Z.locals?g.Z.locals:void 0}},i={};function l(e){var t=i[e];if(void 0!==t)return t.exports;var r=i[e]={id:e,exports:{}};return a[e].call(r.exports,r,r.exports,l),r.exports}l.m=a,e=[],l.O=(t,r,n,o)=>{if(!r){var a=1/0;for(d=0;d<e.length;d++){for(var[r,n,o]=e[d],i=!0,s=0;s<r.length;s++)(!1&o||a>=o)&&Object.keys(l.O).every((e=>l.O[e](r[s])))?r.splice(s--,1):(i=!1,o<a&&(a=o));if(i){e.splice(d--,1);var c=n();void 0!==c&&(t=c)}}return t}o=o||0;for(var d=e.length;d>0&&e[d-1][2]>o;d--)e[d]=e[d-1];e[d]=[r,n,o]},l.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return l.d(t,{a:t}),t},r=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,l.t=function(e,n){if(1&n&&(e=this(e)),8&n)return e;if("object"==typeof e&&e){if(4&n&&e.__esModule)return e;if(16&n&&"function"==typeof e.then)return e}var o=Object.create(null);l.r(o);var a={};t=t||[null,r({}),r([]),r(r)];for(var i=2&n&&e;"object"==typeof i&&!~t.indexOf(i);i=r(i))Object.getOwnPropertyNames(i).forEach((t=>a[t]=()=>e[t]));return a.default=()=>e,l.d(o,a),o},l.d=(e,t)=>{for(var r in t)l.o(t,r)&&!l.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},l.f={},l.e=e=>Promise.all(Object.keys(l.f).reduce(((t,r)=>(l.f[r](e,t),t)),[])),l.u=e=>e+".bundle.js",l.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),l.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n={},o="weal:",l.l=(e,t,r,a)=>{if(n[e])n[e].push(t);else{var i,s;if(void 0!==r)for(var c=document.getElementsByTagName("script"),d=0;d<c.length;d++){var p=c[d];if(p.getAttribute("src")==e||p.getAttribute("data-webpack")==o+r){i=p;break}}i||(s=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,l.nc&&i.setAttribute("nonce",l.nc),i.setAttribute("data-webpack",o+r),i.src=e),n[e]=[t];var A=(t,r)=>{i.onerror=i.onload=null,clearTimeout(m);var o=n[e];if(delete n[e],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((e=>e(r))),t)return t(r)},m=setTimeout(A.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=A.bind(null,i.onerror),i.onload=A.bind(null,i.onload),s&&document.head.appendChild(i)}},l.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;l.g.importScripts&&(e=l.g.location+"");var t=l.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),l.p=e})(),(()=>{var e={179:0};l.f.j=(t,r)=>{var n=l.o(e,t)?e[t]:void 0;if(0!==n)if(n)r.push(n[2]);else{var o=new Promise(((r,o)=>n=e[t]=[r,o]));r.push(n[2]=o);var a=l.p+l.u(t),i=new Error;l.l(a,(r=>{if(l.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var o=r&&("load"===r.type?"missing":r.type),a=r&&r.target&&r.target.src;i.message="Loading chunk "+t+" failed.\n("+o+": "+a+")",i.name="ChunkLoadError",i.type=o,i.request=a,n[1](i)}}),"chunk-"+t,t)}},l.O.j=t=>0===e[t];var t=(t,r)=>{var n,o,[a,i,s]=r,c=0;if(a.some((t=>0!==e[t]))){for(n in i)l.o(i,n)&&(l.m[n]=i[n]);if(s)var d=s(l)}for(t&&t(r);c<a.length;c++)o=a[c],l.o(e,o)&&e[o]&&e[o][0](),e[o]=0;return l.O(d)},r=self.webpackChunkweal=self.webpackChunkweal||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})(),l.nc=void 0;var s=l.O(void 0,[256],(()=>l(1285)));s=l.O(s)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUdJN0csRUFBVTZDLEdBSFR0QyxFQUFVdUcsRUFBYUMsR0FBV0YsRUFHaEJqRyxFQUFJLEVBQzNCLEdBQUdMLEVBQVN5RyxNQUFNekgsR0FBZ0MsSUFBeEJ5RyxFQUFnQnpHLEtBQWEsQ0FDdEQsSUFBSVMsS0FBWThHLEVBQ1ovRyxFQUFvQndDLEVBQUV1RSxFQUFhOUcsS0FDckNELEVBQW9CSyxFQUFFSixHQUFZOEcsRUFBWTlHLElBR2hELEdBQUcrRyxFQUFTLElBQUl6RyxFQUFTeUcsRUFBUWhILEVBQ2xDLENBRUEsSUFERzZHLEdBQTRCQSxFQUEyQkMsR0FDckRqRyxFQUFJTCxFQUFTTSxPQUFRRCxJQUN6QmlDLEVBQVV0QyxFQUFTSyxHQUNoQmIsRUFBb0J3QyxFQUFFeUQsRUFBaUJuRCxJQUFZbUQsRUFBZ0JuRCxJQUNyRW1ELEVBQWdCbkQsR0FBUyxLQUUxQm1ELEVBQWdCbkQsR0FBVyxFQUU1QixPQUFPOUMsRUFBb0JNLEVBQUVDLEVBQU8sRUFHakMyRyxFQUFxQkMsS0FBdUIsaUJBQUlBLEtBQXVCLGtCQUFLLEdBQ2hGRCxFQUFtQjVFLFFBQVFzRSxFQUFxQnpCLEtBQUssS0FBTSxJQUMzRCtCLEVBQW1CM0gsS0FBT3FILEVBQXFCekIsS0FBSyxLQUFNK0IsRUFBbUIzSCxLQUFLNEYsS0FBSytCLEcsS0NyRnZGbEgsRUFBb0JzRSxRQUFLbEgsRUNHekIsSUFBSWdLLEVBQXNCcEgsRUFBb0JNLE9BQUVsRCxFQUFXLENBQUMsTUFBTSxJQUFPNEMsRUFBb0IsUUFDN0ZvSCxFQUFzQnBILEVBQW9CTSxFQUFFOEcsRSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYWwvd2VicGFjay9ydW50aW1lL2NodW5rIGxvYWRlZCIsIndlYnBhY2s6Ly93ZWFsL3dlYnBhY2svcnVudGltZS9jcmVhdGUgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3dlYWwvd2VicGFjay9ydW50aW1lL2xvYWQgc2NyaXB0Iiwid2VicGFjazovL3dlYWwvLi9pbnRlcmZhY2VzL2NvbXBvbmVudHMvbG9hZGVyLmpzIiwid2VicGFjazovL3dlYWwvLi9pbnRlcmZhY2VzL2NvbnN0YW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWFsLy4vaW50ZXJmYWNlcy9ob29rcy91c2VUaGVtZS5qcyIsIndlYnBhY2s6Ly93ZWFsLy4vaW50ZXJmYWNlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly93ZWFsLy4vaW50ZXJmYWNlcy91dGlscy9zdG9yYWdlLmpzIiwid2VicGFjazovL3dlYWwvLi9pbnRlcmZhY2VzL3V0aWxzL3RoZW1lcy5qcyIsIndlYnBhY2s6Ly93ZWFsLy4vaW50ZXJmYWNlcy9zdHlsZXMvbWFpbi5jc3MiLCJ3ZWJwYWNrOi8vd2VhbC8uL2ludGVyZmFjZXMvc3R5bGVzL21haW4uY3NzP2FlMjEiLCJ3ZWJwYWNrOi8vd2VhbC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWFsL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3dlYWwvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3dlYWwvd2VicGFjay9ydW50aW1lL2Vuc3VyZSBjaHVuayIsIndlYnBhY2s6Ly93ZWFsL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly93ZWFsL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vd2VhbC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3dlYWwvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly93ZWFsL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3dlYWwvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vd2VhbC93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vd2VhbC93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRlZmVycmVkID0gW107XG5fX3dlYnBhY2tfcmVxdWlyZV9fLk8gPSAocmVzdWx0LCBjaHVua0lkcywgZm4sIHByaW9yaXR5KSA9PiB7XG5cdGlmKGNodW5rSWRzKSB7XG5cdFx0cHJpb3JpdHkgPSBwcmlvcml0eSB8fCAwO1xuXHRcdGZvcih2YXIgaSA9IGRlZmVycmVkLmxlbmd0aDsgaSA+IDAgJiYgZGVmZXJyZWRbaSAtIDFdWzJdID4gcHJpb3JpdHk7IGktLSkgZGVmZXJyZWRbaV0gPSBkZWZlcnJlZFtpIC0gMV07XG5cdFx0ZGVmZXJyZWRbaV0gPSBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV07XG5cdFx0cmV0dXJuO1xuXHR9XG5cdHZhciBub3RGdWxmaWxsZWQgPSBJbmZpbml0eTtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBbY2h1bmtJZHMsIGZuLCBwcmlvcml0eV0gPSBkZWZlcnJlZFtpXTtcblx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGNodW5rSWRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRpZiAoKHByaW9yaXR5ICYgMSA9PT0gMCB8fCBub3RGdWxmaWxsZWQgPj0gcHJpb3JpdHkpICYmIE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uTykuZXZlcnkoKGtleSkgPT4gKF9fd2VicGFja19yZXF1aXJlX18uT1trZXldKGNodW5rSWRzW2pdKSkpKSB7XG5cdFx0XHRcdGNodW5rSWRzLnNwbGljZShqLS0sIDEpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZnVsZmlsbGVkID0gZmFsc2U7XG5cdFx0XHRcdGlmKHByaW9yaXR5IDwgbm90RnVsZmlsbGVkKSBub3RGdWxmaWxsZWQgPSBwcmlvcml0eTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYoZnVsZmlsbGVkKSB7XG5cdFx0XHRkZWZlcnJlZC5zcGxpY2UoaS0tLCAxKVxuXHRcdFx0dmFyIHIgPSBmbigpO1xuXHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkgcmVzdWx0ID0gcjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07IiwidmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mID8gKG9iaikgPT4gKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKSA6IChvYmopID0+IChvYmouX19wcm90b19fKTtcbnZhciBsZWFmUHJvdG90eXBlcztcbi8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLy8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLy8gbW9kZSAmIDE2OiByZXR1cm4gdmFsdWUgd2hlbiBpdCdzIFByb21pc2UtbGlrZVxuLy8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuX193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcblx0aWYobW9kZSAmIDEpIHZhbHVlID0gdGhpcyh2YWx1ZSk7XG5cdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG5cdGlmKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUpIHtcblx0XHRpZigobW9kZSAmIDQpICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcblx0XHRpZigobW9kZSAmIDE2KSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHZhbHVlO1xuXHR9XG5cdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG5cdHZhciBkZWYgPSB7fTtcblx0bGVhZlByb3RvdHlwZXMgPSBsZWFmUHJvdG90eXBlcyB8fCBbbnVsbCwgZ2V0UHJvdG8oe30pLCBnZXRQcm90byhbXSksIGdldFByb3RvKGdldFByb3RvKV07XG5cdGZvcih2YXIgY3VycmVudCA9IG1vZGUgJiAyICYmIHZhbHVlOyB0eXBlb2YgY3VycmVudCA9PSAnb2JqZWN0JyAmJiAhfmxlYWZQcm90b3R5cGVzLmluZGV4T2YoY3VycmVudCk7IGN1cnJlbnQgPSBnZXRQcm90byhjdXJyZW50KSkge1xuXHRcdE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGN1cnJlbnQpLmZvckVhY2goKGtleSkgPT4gKGRlZltrZXldID0gKCkgPT4gKHZhbHVlW2tleV0pKSk7XG5cdH1cblx0ZGVmWydkZWZhdWx0J10gPSAoKSA9PiAodmFsdWUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGRlZik7XG5cdHJldHVybiBucztcbn07IiwidmFyIGluUHJvZ3Jlc3MgPSB7fTtcbnZhciBkYXRhV2VicGFja1ByZWZpeCA9IFwid2VhbDpcIjtcbi8vIGxvYWRTY3JpcHQgZnVuY3Rpb24gdG8gbG9hZCBhIHNjcmlwdCB2aWEgc2NyaXB0IHRhZ1xuX193ZWJwYWNrX3JlcXVpcmVfXy5sID0gKHVybCwgZG9uZSwga2V5LCBjaHVua0lkKSA9PiB7XG5cdGlmKGluUHJvZ3Jlc3NbdXJsXSkgeyBpblByb2dyZXNzW3VybF0ucHVzaChkb25lKTsgcmV0dXJuOyB9XG5cdHZhciBzY3JpcHQsIG5lZWRBdHRhY2g7XG5cdGlmKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHMgPSBzY3JpcHRzW2ldO1xuXHRcdFx0aWYocy5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgPT0gdXJsIHx8IHMuZ2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIpID09IGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KSB7IHNjcmlwdCA9IHM7IGJyZWFrOyB9XG5cdFx0fVxuXHR9XG5cdGlmKCFzY3JpcHQpIHtcblx0XHRuZWVkQXR0YWNoID0gdHJ1ZTtcblx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuXHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04Jztcblx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuXHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuXHRcdH1cblx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIsIGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KTtcblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKChmbikgPT4gKGZuKGV2ZW50KSkpO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fVxuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JylcblxuY29uc3QgeyBQcm9ncmVzc0JhciB9ID0gcmVxdWlyZSgncmVhY3QtbG9hZGVyLXNwaW5uZXInKVxuXG5jb25zdCB1c2VUaGVtZSA9IHJlcXVpcmUoJy4uL2hvb2tzL3VzZVRoZW1lJylcblxuY29uc3QgeyBMSUdIVF9USEVNRV9LRVkgfSA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cycpXG5cbmNvbnN0IExvYWRlciA9ICh7IG1zZyB9KSA9PiB7XG4gIGNvbnN0IHsgdGhlbWUgfSA9IHVzZVRoZW1lKClcbiAgY29uc3QgaXNMaWdodFRoZW1lID0gdGhlbWUgPT09IExJR0hUX1RIRU1FX0tFWVxuXG4gIGNvbnN0IGxvYWRlciA9IChcbiAgICA8ZGl2IGNsYXNzTmFtZT17YGxvYWRlci1jb250YWluZXIgJHtpc0xpZ2h0VGhlbWUgPyAnbGlnaHQnIDogJ2RhcmsnfWB9PlxuICAgICAgPFByb2dyZXNzQmFyXG4gICAgICAgIGhlaWdodD0nODAnXG4gICAgICAgIHdpZHRoPSc4MCdcbiAgICAgICAgYXJpYUxhYmVsPSdwcm9ncmVzcy1iYXItbG9hZGluZydcbiAgICAgICAgd3JhcHBlclN0eWxlPXt7fX1cbiAgICAgICAgd3JhcHBlckNsYXNzPSdwcm9ncmVzcy1iYXItd3JhcHBlcidcbiAgICAgICAgYm9yZGVyQ29sb3I9e2lzTGlnaHRUaGVtZSA/ICcjMDAwJyA6ICcjRkZGJ31cbiAgICAgICAgYmFyQ29sb3I9e2lzTGlnaHRUaGVtZSA/ICcjMDAwJyA6ICcjRkZGJ31cbiAgICAgIC8+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9e2Bsb2FkZXItY29udGFpbmVyLW1zZyAke2lzTGlnaHRUaGVtZSA/ICdsaWdodCcgOiAnZGFyayd9YH0+e21zZ308L3NwYW4+XG4gICAgPC9kaXY+XG4gIClcblxuICByZXR1cm4gbG9hZGVyXG59XG5cbm1vZHVsZS5leHBvcnRzID0gTG9hZGVyXG4iLCJjb25zdCBBUFBfTkFNRSA9ICdXZWFsJ1xuXG5jb25zdCBLRVlfTU9ERSA9ICdtb2RlJ1xuY29uc3QgS0VZX0NMRUFSID0gJ2NsZWFyJ1xuXG5jb25zdCBDTURfTU9ERV9MSUdIVCA9ICdtb2RlIC0tbGlnaHQnXG5jb25zdCBDTURfTU9ERV9EQVJLID0gJ21vZGUgLS1kYXJrJ1xuXG5jb25zdCBMSUdIVF9USEVNRSA9ICdsaWdodCdcbmNvbnN0IERBUktfVEhFTUUgPSAnZGFyaydcblxuY29uc3QgTElHSFRfVEhFTUVfS0VZID0gMFxuY29uc3QgREFSS19USEVNRV9LRVkgPSAxXG5cbmNvbnN0IERFRkFVTFRfT1VUUFVUU19MSVNUID0gW1xuICAnV2VsY29tZSB0byB3ZWFsIGludGVyZmFjZScsXG4gICctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyxcbiAgJ1RoZSBmb2xsb3dpbmcgZXhhbXBsZSBjb21tYW5kcyBhcmUgcHJvdmlkZWQ6JyxcbiAgJ2Btb2RlIC0tbGlnaHRgYCB3aWxsIGNoYW5nZSB0byBsaWdodCB0aGVtZS4nLFxuICAnYG1vZGUgLS1kYXJrYGAgd2lsbCBjaGFuZ2UgdG8gZGFyayB0aGVtZS4nLFxuICAnYGNsZWFyYCB3aWxsIGNsZWFyIHRoZSB0ZXJtaW5hbC4nXG5dXG5cbmNvbnN0IEtFWV9DT0RFX0FSUk9XX1VQID0gMzhcblxuY29uc3QgVEVSTUlOQUxfSEVJR0hUID0gNTAwXG5cbmNvbnN0IEtFWV9USEVNRSA9ICd0aGVtZSdcblxuY29uc3QgS0VZX0hJU1RPUlkgPSAnaGlzdG9yeSdcblxuY29uc3QgQkFTSUNfQ01EUyA9IFsnbW9kZSAtLWxpZ2h0JywgJ21vZGUgLS1kYXJrJywgJ2NsZWFyJ11cblxuY29uc3QgREVGQVVMVF9QUk9NUFQgPSAnJCdcblxuY29uc3QgUFdEX0NNRCA9ICdwd2QnXG5cbmNvbnN0IEFQUF9MT0FERVJfTVNHID0gJ0NoZWNraW5nIHByb2Nlc3MgaXMgcmVhZHkuLi4nXG5jb25zdCBGQUxMQkFDS19MT0FERVJfTVNHID0gJ1NvcnJ5LCBwbGVhc2UgcmUtb3BlbiBkaXJlY3Rvcnkgb24gZW5jb3VudGVyZWQgYW4gZXJyb3InXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBUFBfTkFNRSxcbiAgS0VZX01PREUsXG4gIEtFWV9DTEVBUixcbiAgQ01EX01PREVfTElHSFQsXG4gIENNRF9NT0RFX0RBUkssXG4gIExJR0hUX1RIRU1FLFxuICBEQVJLX1RIRU1FLFxuICBMSUdIVF9USEVNRV9LRVksXG4gIERBUktfVEhFTUVfS0VZLFxuICBERUZBVUxUX09VVFBVVFNfTElTVCxcbiAgS0VZX0NPREVfQVJST1dfVVAsXG4gIFRFUk1JTkFMX0hFSUdIVCxcbiAgS0VZX1RIRU1FLFxuICBLRVlfSElTVE9SWSxcbiAgQkFTSUNfQ01EUyxcbiAgREVGQVVMVF9QUk9NUFQsXG4gIFBXRF9DTUQsXG4gIEFQUF9MT0FERVJfTVNHLFxuICBGQUxMQkFDS19MT0FERVJfTVNHXG59XG4iLCJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JylcblxuY29uc3QgeyBnZXRTZXNzaW9uU3RvcmFnZSwgc2V0U2Vzc2lvblN0b3JhZ2UgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL3N0b3JhZ2UnKVxuXG5jb25zdCB7IGRlZmF1bHRUaGVtZSB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvdGhlbWVzJylcblxuY29uc3QgeyBLRVlfVEhFTUUgfSA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cycpXG5cbmNvbnN0IHVzZVRoZW1lID0gKCkgPT4ge1xuICBjb25zdCBbdGhlbWUsIHNldFRoZW1lXSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpXG5cbiAgY29uc3Qgc2V0VGhlbWVPblN0YXRlQW5kU2Vzc2lvbiA9ICh0KSA9PiB7XG4gICAgc2V0U2Vzc2lvblN0b3JhZ2UoS0VZX1RIRU1FLCB0KVxuICB9XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZ2V0U2Vzc2lvblN0b3JhZ2UoS0VZX1RIRU1FKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzZXRUaGVtZShnZXRTZXNzaW9uU3RvcmFnZShLRVlfVEhFTUUpKVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXRUaGVtZShkZWZhdWx0VGhlbWUpXG4gICAgfVxuICB9LCBbZ2V0U2Vzc2lvblN0b3JhZ2UoS0VZX1RIRU1FKV0pXG5cbiAgcmV0dXJuIHsgdGhlbWUsIHNldFRoZW1lT25TdGF0ZUFuZFNlc3Npb24gfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHVzZVRoZW1lXG4iLCJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JylcbmNvbnN0IHsgY3JlYXRlUm9vdCB9ID0gcmVxdWlyZSgncmVhY3QtZG9tL2NsaWVudCcpXG5cbmNvbnN0IExvYWRlciA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9sb2FkZXInKVxuXG5jb25zdCB7IEZBTExCQUNLX0xPQURFUl9NU0cgfSA9IHJlcXVpcmUoJy4vY29uc3RhbnRzJylcblxucmVxdWlyZSgnLi9zdHlsZXMvbWFpbi5jc3MnKVxuXG5jb25zdCByb290RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JylcbmNvbnN0IHJvb3QgPSBjcmVhdGVSb290KHJvb3RFbGVtZW50KVxuXG5jb25zdCBBcHAgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydCgnLi9hcHAnKSlcblxucm9vdC5yZW5kZXIoXG4gIDxSZWFjdC5TdXNwZW5zZSBmYWxsYmFjaz17PExvYWRlciBtc2c9e0ZBTExCQUNLX0xPQURFUl9NU0d9IC8+fT5cbiAgICA8QXBwIC8+XG4gIDwvUmVhY3QuU3VzcGVuc2U+XG4pXG4iLCJjb25zdCBnZXRMb2NhbFN0b3JhZ2UgPSAoa2V5KSA9PiB7XHJcbiAgcmV0dXJuIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KSlcclxufVxyXG5cclxuY29uc3Qgc2V0TG9jYWxTdG9yYWdlID0gKGtleSwgdmFsKSA9PiB7XHJcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeSh2YWwpKVxyXG59XHJcblxyXG5jb25zdCBnZXRTZXNzaW9uU3RvcmFnZSA9IChrZXkpID0+IHtcclxuICByZXR1cm4gSlNPTi5wYXJzZShzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKGtleSkpXHJcbn1cclxuXHJcbmNvbnN0IHNldFNlc3Npb25TdG9yYWdlID0gKGtleSwgdmFsKSA9PiB7XHJcbiAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShrZXksIEpTT04uc3RyaW5naWZ5KHZhbCkpXHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0geyBnZXRMb2NhbFN0b3JhZ2UsIHNldExvY2FsU3RvcmFnZSwgZ2V0U2Vzc2lvblN0b3JhZ2UsIHNldFNlc3Npb25TdG9yYWdlIH1cclxuIiwiY29uc3QgeyBDb2xvck1vZGUgfSA9IHJlcXVpcmUoJ3JlYWN0LXRlcm1pbmFsLXVpJylcblxuY29uc3QgeyBDTURfTU9ERV9MSUdIVCwgQ01EX01PREVfREFSSywgTElHSFRfVEhFTUUsIERBUktfVEhFTUUgfSA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cycpXG5cbmNvbnN0IHRoZW1lQnlNb2RlID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGxpZ2h0OiBDb2xvck1vZGUuTGlnaHQsXG4gIGRhcms6IENvbG9yTW9kZS5EYXJrXG59KVxuXG5jb25zdCBkZWZhdWx0VGhlbWUgPSB0aGVtZUJ5TW9kZVtMSUdIVF9USEVNRV1cblxuY29uc3Qgc3dpdGNoVGhlbWUgPSAodmFsKSA9PiB7XG4gIGxldCB0aGVtZSA9IExJR0hUX1RIRU1FXG5cbiAgaWYgKHZhbC50b0xvY2FsZUxvd2VyQ2FzZSgpLnRyaW0oKSA9PT0gQ01EX01PREVfTElHSFQpIHtcbiAgICB0aGVtZSA9IExJR0hUX1RIRU1FXG4gIH0gZWxzZSBpZiAodmFsLnRvTG9jYWxlTG93ZXJDYXNlKCkudHJpbSgpID09PSBDTURfTU9ERV9EQVJLKSB7XG4gICAgdGhlbWUgPSBEQVJLX1RIRU1FXG4gIH1cblxuICByZXR1cm4gdGhlbWVCeU1vZGVbdGhlbWVdXG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBkZWZhdWx0VGhlbWUsIHN3aXRjaFRoZW1lIH1cbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9UG9wcGlucyZkaXNwbGF5PXN3YXApO1wiXSk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJib2R5IHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBmb250LWZhbWlseTogUG9wcGlucywgc2Fucy1zZXJpZjtcXG59XFxuXFxuLnJlYWN0LXRlcm1pbmFsLXdyYXBwZXIge1xcbiAgYm9yZGVyLXJhZGl1czogMCAhaW1wb3J0YW50O1xcbiAgaGVpZ2h0OiAxMDB2aCAhaW1wb3J0YW50O1xcbiAgZm9udC1zaXplOiAxNHB4ICFpbXBvcnRhbnQ7XFxufVxcblxcbi5yZWFjdC10ZXJtaW5hbDpsYXN0LWNoaWxkIHtcXG4gIHBhZGRpbmctYm90dG9tOiA1MHB4O1xcbn1cXG5cXG4ubG9hZGVyLWNvbnRhaW5lciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwdmg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuXFxuLmxvYWRlci1jb250YWluZXIuZGFyayB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjUyYTMzO1xcbn1cXG5cXG4ubG9hZGVyLWNvbnRhaW5lci5saWdodCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGRkO1xcbn1cXG5cXG4ubG9hZGVyLWNvbnRhaW5lci1tc2cuZGFyayB7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuXFxuLmxvYWRlci1jb250YWluZXItbXNnLmxpZ2h0IHtcXG4gIGNvbG9yOiAjMDAwO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9pbnRlcmZhY2VzL3N0eWxlcy9tYWluLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFFQTtFQUNFLFNBQVM7RUFDVCxVQUFVO0VBQ1YsZ0NBQWdDO0FBQ2xDOztBQUVBO0VBQ0UsMkJBQTJCO0VBQzNCLHdCQUF3QjtFQUN4QiwwQkFBMEI7QUFDNUI7O0FBRUE7RUFDRSxvQkFBb0I7QUFDdEI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsYUFBYTtFQUNiLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLFdBQVc7QUFDYjs7QUFFQTtFQUNFLFdBQVc7QUFDYlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0IHVybChcXFwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1Qb3BwaW5zJmRpc3BsYXk9c3dhcFxcXCIpO1xcblxcbmJvZHkge1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIGZvbnQtZmFtaWx5OiBQb3BwaW5zLCBzYW5zLXNlcmlmO1xcbn1cXG5cXG4ucmVhY3QtdGVybWluYWwtd3JhcHBlciB7XFxuICBib3JkZXItcmFkaXVzOiAwICFpbXBvcnRhbnQ7XFxuICBoZWlnaHQ6IDEwMHZoICFpbXBvcnRhbnQ7XFxuICBmb250LXNpemU6IDE0cHggIWltcG9ydGFudDtcXG59XFxuXFxuLnJlYWN0LXRlcm1pbmFsOmxhc3QtY2hpbGQge1xcbiAgcGFkZGluZy1ib3R0b206IDUwcHg7XFxufVxcblxcbi5sb2FkZXItY29udGFpbmVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDB2aDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG5cXG4ubG9hZGVyLWNvbnRhaW5lci5kYXJrIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICMyNTJhMzM7XFxufVxcblxcbi5sb2FkZXItY29udGFpbmVyLmxpZ2h0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkZGQ7XFxufVxcblxcbi5sb2FkZXItY29udGFpbmVyLW1zZy5kYXJrIHtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG5cXG4ubG9hZGVyLWNvbnRhaW5lci1tc2cubGlnaHQge1xcbiAgY29sb3I6ICMwMDA7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWFpbi5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZiA9IHt9O1xuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuLy8gVGhlIGNodW5rIGxvYWRpbmcgZnVuY3Rpb24gZm9yIGFkZGl0aW9uYWwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSAoY2h1bmtJZCkgPT4ge1xuXHRyZXR1cm4gUHJvbWlzZS5hbGwoT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5mKS5yZWR1Y2UoKHByb21pc2VzLCBrZXkpID0+IHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZba2V5XShjaHVua0lkLCBwcm9taXNlcyk7XG5cdFx0cmV0dXJuIHByb21pc2VzO1xuXHR9LCBbXSkpO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18udSA9IChjaHVua0lkKSA9PiB7XG5cdC8vIHJldHVybiB1cmwgZm9yIGZpbGVuYW1lcyBiYXNlZCBvbiB0ZW1wbGF0ZVxuXHRyZXR1cm4gXCJcIiArIGNodW5rSWQgKyBcIi5idW5kbGUuanNcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjO1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiLy8gbm8gYmFzZVVSSVxuXG4vLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4vLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbnZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG5cdDE3OTogMFxufTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5mLmogPSAoY2h1bmtJZCwgcHJvbWlzZXMpID0+IHtcblx0XHQvLyBKU09OUCBjaHVuayBsb2FkaW5nIGZvciBqYXZhc2NyaXB0XG5cdFx0dmFyIGluc3RhbGxlZENodW5rRGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpID8gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdIDogdW5kZWZpbmVkO1xuXHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgeyAvLyAwIG1lYW5zIFwiYWxyZWFkeSBpbnN0YWxsZWRcIi5cblxuXHRcdFx0Ly8gYSBQcm9taXNlIG1lYW5zIFwiY3VycmVudGx5IGxvYWRpbmdcIi5cblx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZih0cnVlKSB7IC8vIGFsbCBjaHVua3MgaGF2ZSBKU1xuXHRcdFx0XHRcdC8vIHNldHVwIFByb21pc2UgaW4gY2h1bmsgY2FjaGVcblx0XHRcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IChpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSBbcmVzb2x2ZSwgcmVqZWN0XSkpO1xuXHRcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdID0gcHJvbWlzZSk7XG5cblx0XHRcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG5cdFx0XHRcdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18udShjaHVua0lkKTtcblx0XHRcdFx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG5cdFx0XHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cdFx0XHRcdFx0dmFyIGxvYWRpbmdFbmRlZCA9IChldmVudCkgPT4ge1xuXHRcdFx0XHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkpIHtcblx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuXHRcdFx0XHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IubmFtZSA9ICdDaHVua0xvYWRFcnJvcic7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcblx0XHRcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGFbMV0oZXJyb3IpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmwodXJsLCBsb2FkaW5nRW5kZWQsIFwiY2h1bmstXCIgKyBjaHVua0lkLCBjaHVua0lkKTtcblx0XHRcdFx0fSBlbHNlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG5cdFx0XHR9XG5cdFx0fVxufTtcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5PLmogPSAoY2h1bmtJZCkgPT4gKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9PT0gMCk7XG5cbi8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xudmFyIHdlYnBhY2tKc29ucENhbGxiYWNrID0gKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uLCBkYXRhKSA9PiB7XG5cdHZhciBbY2h1bmtJZHMsIG1vcmVNb2R1bGVzLCBydW50aW1lXSA9IGRhdGE7XG5cdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuXHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcblx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMDtcblx0aWYoY2h1bmtJZHMuc29tZSgoaWQpID0+IChpbnN0YWxsZWRDaHVua3NbaWRdICE9PSAwKSkpIHtcblx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcblx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKHJ1bnRpbWUpIHZhciByZXN1bHQgPSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHR9XG5cdGlmKHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKSBwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbihkYXRhKTtcblx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcblx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0oKTtcblx0XHR9XG5cdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcblx0fVxuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5PKHJlc3VsdCk7XG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rd2VhbFwiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmt3ZWFsXCJdIHx8IFtdO1xuY2h1bmtMb2FkaW5nR2xvYmFsLmZvckVhY2god2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCAwKSk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgZGVwZW5kcyBvbiBvdGhlciBsb2FkZWQgY2h1bmtzIGFuZCBleGVjdXRpb24gbmVlZCB0byBiZSBkZWxheWVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFsyNTZdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXygxMjg1KSkpXG5fX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXy5PKF9fd2VicGFja19leHBvcnRzX18pO1xuIl0sIm5hbWVzIjpbImRlZmVycmVkIiwibGVhZlByb3RvdHlwZXMiLCJnZXRQcm90byIsImluUHJvZ3Jlc3MiLCJkYXRhV2VicGFja1ByZWZpeCIsIlJlYWN0IiwicmVxdWlyZSIsIlByb2dyZXNzQmFyIiwidXNlVGhlbWUiLCJMSUdIVF9USEVNRV9LRVkiLCJtb2R1bGUiLCJleHBvcnRzIiwiTG9hZGVyIiwibXNnIiwidGhlbWUiLCJpc0xpZ2h0VGhlbWUiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiaGVpZ2h0Iiwid2lkdGgiLCJhcmlhTGFiZWwiLCJ3cmFwcGVyU3R5bGUiLCJ3cmFwcGVyQ2xhc3MiLCJib3JkZXJDb2xvciIsImJhckNvbG9yIiwiQVBQX05BTUUiLCJLRVlfTU9ERSIsIktFWV9DTEVBUiIsIkNNRF9NT0RFX0xJR0hUIiwiQ01EX01PREVfREFSSyIsIkxJR0hUX1RIRU1FIiwiREFSS19USEVNRSIsIkRBUktfVEhFTUVfS0VZIiwiREVGQVVMVF9PVVRQVVRTX0xJU1QiLCJLRVlfQ09ERV9BUlJPV19VUCIsIlRFUk1JTkFMX0hFSUdIVCIsIktFWV9USEVNRSIsIktFWV9ISVNUT1JZIiwiQkFTSUNfQ01EUyIsIkRFRkFVTFRfUFJPTVBUIiwiUFdEX0NNRCIsIkFQUF9MT0FERVJfTVNHIiwiRkFMTEJBQ0tfTE9BREVSX01TRyIsImdldFNlc3Npb25TdG9yYWdlIiwic2V0U2Vzc2lvblN0b3JhZ2UiLCJkZWZhdWx0VGhlbWUiLCJzZXRUaGVtZSIsInVzZVN0YXRlIiwidXNlRWZmZWN0IiwidW5kZWZpbmVkIiwic2V0VGhlbWVPblN0YXRlQW5kU2Vzc2lvbiIsInQiLCJjcmVhdGVSb290Iiwicm9vdCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJBcHAiLCJsYXp5IiwicmVuZGVyIiwiU3VzcGVuc2UiLCJmYWxsYmFjayIsImdldExvY2FsU3RvcmFnZSIsImtleSIsIkpTT04iLCJwYXJzZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzZXRMb2NhbFN0b3JhZ2UiLCJ2YWwiLCJzZXRJdGVtIiwic3RyaW5naWZ5Iiwic2Vzc2lvblN0b3JhZ2UiLCJDb2xvck1vZGUiLCJ0aGVtZUJ5TW9kZSIsIk9iamVjdCIsImZyZWV6ZSIsImxpZ2h0IiwiTGlnaHQiLCJkYXJrIiwiRGFyayIsInN3aXRjaFRoZW1lIiwidG9Mb2NhbGVMb3dlckNhc2UiLCJ0cmltIiwiX19fQ1NTX0xPQURFUl9FWFBPUlRfX18iLCJwdXNoIiwiaWQiLCJvcHRpb25zIiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJzZXRBdHRyaWJ1dGVzIiwiaW5zZXJ0IiwiZG9tQVBJIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImNhbGwiLCJtIiwiTyIsInJlc3VsdCIsImNodW5rSWRzIiwiZm4iLCJwcmlvcml0eSIsIm5vdEZ1bGZpbGxlZCIsIkluZmluaXR5IiwiaSIsImxlbmd0aCIsImZ1bGZpbGxlZCIsImoiLCJrZXlzIiwiZXZlcnkiLCJzcGxpY2UiLCJyIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImdldFByb3RvdHlwZU9mIiwib2JqIiwidmFsdWUiLCJtb2RlIiwidGhpcyIsInRoZW4iLCJucyIsImNyZWF0ZSIsImRlZiIsImN1cnJlbnQiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImZvckVhY2giLCJkZWZpbml0aW9uIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsImYiLCJlIiwiY2h1bmtJZCIsIlByb21pc2UiLCJhbGwiLCJyZWR1Y2UiLCJwcm9taXNlcyIsInUiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwid2luZG93IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwibCIsInVybCIsImRvbmUiLCJzY3JpcHQiLCJuZWVkQXR0YWNoIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicyIsImdldEF0dHJpYnV0ZSIsImNoYXJzZXQiLCJ0aW1lb3V0IiwibmMiLCJzZXRBdHRyaWJ1dGUiLCJzcmMiLCJvblNjcmlwdENvbXBsZXRlIiwicHJldiIsImV2ZW50Iiwib25lcnJvciIsIm9ubG9hZCIsImNsZWFyVGltZW91dCIsImRvbmVGbnMiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJzZXRUaW1lb3V0IiwiYmluZCIsInR5cGUiLCJ0YXJnZXQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJFcnJvciIsInJlcGxhY2UiLCJwIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaW5zdGFsbGVkQ2h1bmtEYXRhIiwicHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJlcnJvciIsImVycm9yVHlwZSIsInJlYWxTcmMiLCJtZXNzYWdlIiwibmFtZSIsInJlcXVlc3QiLCJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwiZGF0YSIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsInNvbWUiLCJjaHVua0xvYWRpbmdHbG9iYWwiLCJzZWxmIiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJzb3VyY2VSb290IjoiIn0=