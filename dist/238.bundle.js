(self.webpackChunkweal=self.webpackChunkweal||[]).push([[238],{7238:(e,t,r)=>{const n=r(7294),{default:o}=r(3794),u=r(3964),{APP_NAME:a,TERMINAL_HEIGHT:s,APP_LOADER_MSG:l}=r(4224),c=r(8549),i=r(3358),f=r(2671),d=r(943),p=r(8966);e.exports=()=>{const{history:e,groupHistory:t}=c(),{groupInput:r}=i(),{theme:y}=f(),_=d();return p()?n.createElement(o,{name:a,colorMode:y,onInput:e=>{r(e),t(e)},height:s,prompt:_},e):n.createElement(u,{msg:l})}},7894:(e,t,r)=>{const n=r(7294),{TerminalInput:o}=r(3794),{_id:u}=r(7981);e.exports=({value:e})=>n.createElement(o,{key:u()},e)},9970:(e,t,r)=>{const n=r(7294),{TerminalOutput:o}=r(3794),{_id:u}=r(7981);e.exports=({value:e})=>n.createElement(o,{key:u()},e)},4009:(e,t,r)=>{const n=r(7294),{TerminalOutput:o}=r(3794),{_id:u}=r(7981),{DEFAULT_OUTPUTS_LIST:a}=r(4224);e.exports=()=>a.map((e=>n.createElement(o,{key:u()},e)))},8966:(e,t,r)=>{const n=r(7294),{fetchCmd:o}=r(4457),{HEALTH_CMD:u}=r(4224);e.exports=()=>{const[e,t]=n.useState(!1);return(async()=>{await o(u)&&t(!0)})(),e}},8549:(e,t,r)=>{const n=r(7294),o=r(4009),u=r(7894),a=r(9970),{switchTheme:s}=r(5656),{fetchCmd:l}=r(4457),{_id:c}=r(7981),{KEY_MODE:i,KEY_CLEAR:f}=r(4224),d=r(2671);e.exports=()=>{const[e,t]=n.useState([]),{setThemeOnStateAndSession:r}=d();return n.useEffect((()=>{(()=>{const r=[...e];Array.isArray(e)&&0===e.length&&(r.push(n.createElement(o,{key:c()})),t(r))})()}),[]),{history:e,groupHistory:async o=>{let d=[...e];if(d.push(n.createElement(u,{key:c(),value:o})),o.toLocaleLowerCase().trim().slice(0,4)===i){const e=s(o);r(e)}if(o.toLocaleLowerCase().trim()===f)d=[];else if(o){const e=await l(o);d.push(n.createElement(a,{key:c(),value:e}))}t(d)}}}},3358:(e,t,r)=>{const n=r(7294),o=r(7894),{_id:u}=r(7981);e.exports=()=>{const[e,t]=n.useState([]);return{inputs:e,groupInput:r=>{const a=[...e];a.push(n.createElement(o,{key:u(),value:r})),t(a)}}}},943:(e,t,r)=>{const n=r(7294),{fetchCmd:o}=r(4457),{DEFAULT_PROMPT:u,CURRENT_DIR_CMD:a}=r(4224);e.exports=()=>{const[e,t]=n.useState(u);return(async()=>{const e=await o(a);t(`$ ${e}`)})(),e}},814:e=>{const t=Object.freeze({BACKEND_HOST:"localhost",BACKEND_PORT:3221}),r=Object.freeze({BACKEND_URI:`http://${t.BACKEND_HOST}:${t.BACKEND_PORT}`});e.exports={ENV:r}},4457:(e,t,r)=>{const{BASIC_CMDS:n,CMD_MODE_LIGHT:o,CMD_MODE_DARK:u}=r(4224),{ENV:a}=r(814);e.exports={fetchCmd:async e=>{if(n.includes(e)){if(e===o)return"Light mode activated";if(e===u)return"Dark mode activated"}try{const t=await fetch(`${a.BACKEND_URI}/process/${e}`),{data:r}=await t.json();return r}catch(e){return console.error(e),"Commmand not found"}}}},7981:(e,t,r)=>{const{v4:n}=r(7429);e.exports={_id:()=>n()}},7429:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"NIL",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return f.default}}),Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"v1",{enumerable:!0,get:function(){return n.default}}),Object.defineProperty(t,"v3",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"v4",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"v5",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"validate",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(t,"version",{enumerable:!0,get:function(){return l.default}});var n=d(r(3990)),o=d(r(8237)),u=d(r(5355)),a=d(r(3764)),s=d(r(6314)),l=d(r(8464)),c=d(r(6435)),i=d(r(4008)),f=d(r(8222));function d(e){return e&&e.__esModule?e:{default:e}}},4163:(e,t)=>{"use strict";function r(e){return 14+(e+64>>>9<<4)+1}function n(e,t){const r=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(r>>16)<<16|65535&r}function o(e,t,r,o,u,a){return n((s=n(n(t,e),n(o,a)))<<(l=u)|s>>>32-l,r);var s,l}function u(e,t,r,n,u,a,s){return o(t&r|~t&n,e,t,u,a,s)}function a(e,t,r,n,u,a,s){return o(t&n|r&~n,e,t,u,a,s)}function s(e,t,r,n,u,a,s){return o(t^r^n,e,t,u,a,s)}function l(e,t,r,n,u,a,s){return o(r^(t|~n),e,t,u,a,s)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(let r=0;r<t.length;++r)e[r]=t.charCodeAt(r)}return function(e){const t=[],r=32*e.length,n="0123456789abcdef";for(let o=0;o<r;o+=8){const r=e[o>>5]>>>o%32&255,u=parseInt(n.charAt(r>>>4&15)+n.charAt(15&r),16);t.push(u)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[r(t)-1]=t;let o=1732584193,c=-271733879,i=-1732584194,f=271733878;for(let t=0;t<e.length;t+=16){const r=o,d=c,p=i,y=f;o=u(o,c,i,f,e[t],7,-680876936),f=u(f,o,c,i,e[t+1],12,-389564586),i=u(i,f,o,c,e[t+2],17,606105819),c=u(c,i,f,o,e[t+3],22,-1044525330),o=u(o,c,i,f,e[t+4],7,-176418897),f=u(f,o,c,i,e[t+5],12,1200080426),i=u(i,f,o,c,e[t+6],17,-1473231341),c=u(c,i,f,o,e[t+7],22,-45705983),o=u(o,c,i,f,e[t+8],7,1770035416),f=u(f,o,c,i,e[t+9],12,-1958414417),i=u(i,f,o,c,e[t+10],17,-42063),c=u(c,i,f,o,e[t+11],22,-1990404162),o=u(o,c,i,f,e[t+12],7,1804603682),f=u(f,o,c,i,e[t+13],12,-40341101),i=u(i,f,o,c,e[t+14],17,-1502002290),c=u(c,i,f,o,e[t+15],22,1236535329),o=a(o,c,i,f,e[t+1],5,-165796510),f=a(f,o,c,i,e[t+6],9,-1069501632),i=a(i,f,o,c,e[t+11],14,643717713),c=a(c,i,f,o,e[t],20,-373897302),o=a(o,c,i,f,e[t+5],5,-701558691),f=a(f,o,c,i,e[t+10],9,38016083),i=a(i,f,o,c,e[t+15],14,-660478335),c=a(c,i,f,o,e[t+4],20,-405537848),o=a(o,c,i,f,e[t+9],5,568446438),f=a(f,o,c,i,e[t+14],9,-1019803690),i=a(i,f,o,c,e[t+3],14,-187363961),c=a(c,i,f,o,e[t+8],20,1163531501),o=a(o,c,i,f,e[t+13],5,-1444681467),f=a(f,o,c,i,e[t+2],9,-51403784),i=a(i,f,o,c,e[t+7],14,1735328473),c=a(c,i,f,o,e[t+12],20,-1926607734),o=s(o,c,i,f,e[t+5],4,-378558),f=s(f,o,c,i,e[t+8],11,-2022574463),i=s(i,f,o,c,e[t+11],16,1839030562),c=s(c,i,f,o,e[t+14],23,-35309556),o=s(o,c,i,f,e[t+1],4,-1530992060),f=s(f,o,c,i,e[t+4],11,1272893353),i=s(i,f,o,c,e[t+7],16,-155497632),c=s(c,i,f,o,e[t+10],23,-1094730640),o=s(o,c,i,f,e[t+13],4,681279174),f=s(f,o,c,i,e[t],11,-358537222),i=s(i,f,o,c,e[t+3],16,-722521979),c=s(c,i,f,o,e[t+6],23,76029189),o=s(o,c,i,f,e[t+9],4,-640364487),f=s(f,o,c,i,e[t+12],11,-421815835),i=s(i,f,o,c,e[t+15],16,530742520),c=s(c,i,f,o,e[t+2],23,-995338651),o=l(o,c,i,f,e[t],6,-198630844),f=l(f,o,c,i,e[t+7],10,1126891415),i=l(i,f,o,c,e[t+14],15,-1416354905),c=l(c,i,f,o,e[t+5],21,-57434055),o=l(o,c,i,f,e[t+12],6,1700485571),f=l(f,o,c,i,e[t+3],10,-1894986606),i=l(i,f,o,c,e[t+10],15,-1051523),c=l(c,i,f,o,e[t+1],21,-2054922799),o=l(o,c,i,f,e[t+8],6,1873313359),f=l(f,o,c,i,e[t+15],10,-30611744),i=l(i,f,o,c,e[t+6],15,-1560198380),c=l(c,i,f,o,e[t+13],21,1309151649),o=l(o,c,i,f,e[t+4],6,-145523070),f=l(f,o,c,i,e[t+11],10,-1120210379),i=l(i,f,o,c,e[t+2],15,718787259),c=l(c,i,f,o,e[t+9],21,-343485551),o=n(o,r),c=n(c,d),i=n(i,p),f=n(f,y)}return[o,c,i,f]}(function(e){if(0===e.length)return[];const t=8*e.length,n=new Uint32Array(r(t));for(let r=0;r<t;r+=8)n[r>>5]|=(255&e[r/8])<<r%32;return n}(e),8*e.length))}},4790:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};t.default=r},6314:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default="00000000-0000-0000-0000-000000000000"},8222:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,o=(n=r(6435))&&n.__esModule?n:{default:n};t.default=function(e){if(!(0,o.default)(e))throw TypeError("Invalid UUID");let t;const r=new Uint8Array(16);return r[0]=(t=parseInt(e.slice(0,8),16))>>>24,r[1]=t>>>16&255,r[2]=t>>>8&255,r[3]=255&t,r[4]=(t=parseInt(e.slice(9,13),16))>>>8,r[5]=255&t,r[6]=(t=parseInt(e.slice(14,18),16))>>>8,r[7]=255&t,r[8]=(t=parseInt(e.slice(19,23),16))>>>8,r[9]=255&t,r[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,r[11]=t/4294967296&255,r[12]=t>>>24&255,r[13]=t>>>16&255,r[14]=t>>>8&255,r[15]=255&t,r}},58:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i},3319:(e,t)=>{"use strict";let r;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){if(!r&&(r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!r))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return r(n)};const n=new Uint8Array(16)},3757:(e,t)=>{"use strict";function r(e,t,r,n){switch(e){case 0:return t&r^~t&n;case 1:case 3:return t^r^n;case 2:return t&r^t&n^r&n}}function n(e,t){return e<<t|e>>>32-t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default=function(e){const t=[1518500249,1859775393,2400959708,3395469782],o=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){const t=unescape(encodeURIComponent(e));e=[];for(let r=0;r<t.length;++r)e.push(t.charCodeAt(r))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);const u=e.length/4+2,a=Math.ceil(u/16),s=new Array(a);for(let t=0;t<a;++t){const r=new Uint32Array(16);for(let n=0;n<16;++n)r[n]=e[64*t+4*n]<<24|e[64*t+4*n+1]<<16|e[64*t+4*n+2]<<8|e[64*t+4*n+3];s[t]=r}s[a-1][14]=8*(e.length-1)/Math.pow(2,32),s[a-1][14]=Math.floor(s[a-1][14]),s[a-1][15]=8*(e.length-1)&4294967295;for(let e=0;e<a;++e){const u=new Uint32Array(80);for(let t=0;t<16;++t)u[t]=s[e][t];for(let e=16;e<80;++e)u[e]=n(u[e-3]^u[e-8]^u[e-14]^u[e-16],1);let a=o[0],l=o[1],c=o[2],i=o[3],f=o[4];for(let e=0;e<80;++e){const o=Math.floor(e/20),s=n(a,5)+r(o,l,c,i)+f+t[o]+u[e]>>>0;f=i,i=c,c=n(l,30)>>>0,l=a,a=s}o[0]=o[0]+a>>>0,o[1]=o[1]+l>>>0,o[2]=o[2]+c>>>0,o[3]=o[3]+i>>>0,o[4]=o[4]+f>>>0}return[o[0]>>24&255,o[0]>>16&255,o[0]>>8&255,255&o[0],o[1]>>24&255,o[1]>>16&255,o[1]>>8&255,255&o[1],o[2]>>24&255,o[2]>>16&255,o[2]>>8&255,255&o[2],o[3]>>24&255,o[3]>>16&255,o[3]>>8&255,255&o[3],o[4]>>24&255,o[4]>>16&255,o[4]>>8&255,255&o[4]]}},4008:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.unsafeStringify=a;var n,o=(n=r(6435))&&n.__esModule?n:{default:n};const u=[];for(let e=0;e<256;++e)u.push((e+256).toString(16).slice(1));function a(e,t=0){return(u[e[t+0]]+u[e[t+1]]+u[e[t+2]]+u[e[t+3]]+"-"+u[e[t+4]]+u[e[t+5]]+"-"+u[e[t+6]]+u[e[t+7]]+"-"+u[e[t+8]]+u[e[t+9]]+"-"+u[e[t+10]]+u[e[t+11]]+u[e[t+12]]+u[e[t+13]]+u[e[t+14]]+u[e[t+15]]).toLowerCase()}t.default=function(e,t=0){const r=a(e,t);if(!(0,o.default)(r))throw TypeError("Stringified UUID is invalid");return r}},3990:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,o=(n=r(3319))&&n.__esModule?n:{default:n},u=r(4008);let a,s,l=0,c=0;t.default=function(e,t,r){let n=t&&r||0;const i=t||new Array(16);let f=(e=e||{}).node||a,d=void 0!==e.clockseq?e.clockseq:s;if(null==f||null==d){const t=e.random||(e.rng||o.default)();null==f&&(f=a=[1|t[0],t[1],t[2],t[3],t[4],t[5]]),null==d&&(d=s=16383&(t[6]<<8|t[7]))}let p=void 0!==e.msecs?e.msecs:Date.now(),y=void 0!==e.nsecs?e.nsecs:c+1;const _=p-l+(y-c)/1e4;if(_<0&&void 0===e.clockseq&&(d=d+1&16383),(_<0||p>l)&&void 0===e.nsecs&&(y=0),y>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");l=p,c=y,s=d,p+=122192928e5;const v=(1e4*(268435455&p)+y)%4294967296;i[n++]=v>>>24&255,i[n++]=v>>>16&255,i[n++]=v>>>8&255,i[n++]=255&v;const h=p/4294967296*1e4&268435455;i[n++]=h>>>8&255,i[n++]=255&h,i[n++]=h>>>24&15|16,i[n++]=h>>>16&255,i[n++]=d>>>8|128,i[n++]=255&d;for(let e=0;e<6;++e)i[n+e]=f[e];return t||(0,u.unsafeStringify)(i)}},8237:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=u(r(7925)),o=u(r(4163));function u(e){return e&&e.__esModule?e:{default:e}}var a=(0,n.default)("v3",48,o.default);t.default=a},7925:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0,t.default=function(e,t,r){function n(e,n,a,s){var l;if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));const t=[];for(let r=0;r<e.length;++r)t.push(e.charCodeAt(r));return t}(e)),"string"==typeof n&&(n=(0,u.default)(n)),16!==(null===(l=n)||void 0===l?void 0:l.length))throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let c=new Uint8Array(16+e.length);if(c.set(n),c.set(e,n.length),c=r(c),c[6]=15&c[6]|t,c[8]=63&c[8]|128,a){s=s||0;for(let e=0;e<16;++e)a[s+e]=c[e];return a}return(0,o.unsafeStringify)(c)}try{n.name=e}catch(e){}return n.DNS=a,n.URL=s,n};var n,o=r(4008),u=(n=r(8222))&&n.__esModule?n:{default:n};const a="6ba7b810-9dad-11d1-80b4-00c04fd430c8";t.DNS=a;const s="6ba7b811-9dad-11d1-80b4-00c04fd430c8";t.URL=s},5355:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=a(r(4790)),o=a(r(3319)),u=r(4008);function a(e){return e&&e.__esModule?e:{default:e}}t.default=function(e,t,r){if(n.default.randomUUID&&!t&&!e)return n.default.randomUUID();const a=(e=e||{}).random||(e.rng||o.default)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,t){r=r||0;for(let e=0;e<16;++e)t[r+e]=a[e];return t}return(0,u.unsafeStringify)(a)}},3764:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n=u(r(7925)),o=u(r(3757));function u(e){return e&&e.__esModule?e:{default:e}}var a=(0,n.default)("v5",80,o.default);t.default=a},6435:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,o=(n=r(58))&&n.__esModule?n:{default:n};t.default=function(e){return"string"==typeof e&&o.default.test(e)}},8464:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n,o=(n=r(6435))&&n.__esModule?n:{default:n};t.default=function(e){if(!(0,o.default)(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,